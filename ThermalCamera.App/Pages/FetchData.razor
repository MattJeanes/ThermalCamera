@page "/fetchdata"

@using ThermalCamera.App.Data
@using ThermalCamera.App.Data.Interfaces
@inject NavigationManager NavigationManager
@inject UsbConnectionService UsbConnectionService

<h1>USB Connection Service</h1>

<p>This table shows all connected USB devices.</p>

<button class="btn btn-primary" @onclick="Refresh">Refresh</button>

@if (_usbConnectionData == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Summary</th>
				<th>Select</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var data in _usbConnectionData)
			{
				<tr>
					<td>@data.Summary (@data.Id)</td>
					<td><button @onclick="@(async () => await Connect(data))">Select</button></td>
				</tr>
			}
		</tbody>
	</table>

	<pre>@_streamData</pre>
}

@code {
	private List<UsbConnectionData>? _usbConnectionData = new List<UsbConnectionData>();
	private IDeviceStream? _deviceStream;
	private string _streamData = string.Empty;
	private List<string> _streamDataRaw = new List<string>();

	protected override async Task OnInitializedAsync()
	{
		await Refresh();
		ConnectStream();
	}

	private async Task Refresh()
	{
		_usbConnectionData = await UsbConnectionService.GetData();
	}

	private void ConnectStream()
	{
		var deviceStream = UsbConnectionService.GetStream();
		if (deviceStream != null)
		{
			HandleStream(deviceStream);
		}
	}

	private void HandleStream(IDeviceStream deviceStream)
	{
		_deviceStream = deviceStream;
		_deviceStream.Output += HandleOutputEvent;
	}

	private async void HandleOutputEvent(object? sender, OutputEventArgs args)
	{
		await InvokeAsync(() =>
		{
			_streamDataRaw.Add(args.Output);
			_streamData = string.Join('\n', _streamDataRaw);
			StateHasChanged();
		});
	}

	private async Task Connect(UsbConnectionData data)
	{
		if (_deviceStream != null)
		{
			_deviceStream.Output -= HandleOutputEvent;
			_deviceStream = null;
		}
		_deviceStream = null;
		var deviceStream = await UsbConnectionService.Connect(data);
		HandleStream(deviceStream);
	}
}
